AWSTemplateFormatVersion: '2010-09-09'
Description: general
Transform:
- AWS::Serverless-2016-10-31
Resources:
  registerUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: register-user/index.registerUserHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user registration with MySQL database
      CodeUri: registerUserFunction
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /register
            Method: POST
    Metadata:
      SamResourceId: registerUserFunction
  loginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login-user/index.loginUserHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user login and JWT token generation
      CodeUri: loginUserFunction
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
          JWT_SECRET: your-secret-key-here
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: POST
    Metadata:
      SamResourceId: loginUserFunction
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
  getTournamentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-tournaments/index.getTournamentsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles fetching and filtering tournaments
      CodeUri: getTournamentsFunction
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments
            Method: GET
    Metadata:
      SamResourceId: getTournamentsFunction
  getTournamentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-tournament-by-id/index.getTournamentByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles fetching a single tournament with detailed organizer information
      CodeUri: getTournamentByIdFunction
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments/{id}
            Method: GET
    Metadata:
      SamResourceId: getTournamentByIdFunction
  createTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-team/index.createTeamHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Creates a new team and adds the creator as first member
      CodeUri: createTeamFunction
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teams
            Method: POST
    Metadata:
      SamResourceId: createTeamFunction
  getTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-teams/index.getTeamsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all teams with optional filters
      CodeUri: getTeamsFunction
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teams
            Method: GET
    Metadata:
      SamResourceId: getTeamsFunction
Outputs:
  RegisterEndpoint:
    Description: API Gateway endpoint URL for Register function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register
  LoginEndpoint:
    Description: API Gateway endpoint URL for Login function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login
