# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  general

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"
Resources:
  registerUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: register-user/index.registerUserHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user registration with MySQL database
      CodeUri: src/handlers/
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /register
            Method: POST

  updateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-user/index.updateProfileHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user profile updates
      CodeUri: src/handlers/
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /profile/{user_id}
            Method: PUT

  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-user/index.getUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles fetching user data
      CodeUri: src/handlers/
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /profile/{user_id}
            Method: GET

  loginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login-user/index.loginUserHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user login and JWT token generation
      CodeUri: src/handlers/
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
          JWT_SECRET: your-secret-key-here
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: POST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
        
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup

  createTournamentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-tournament/index.createTournamentHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Creates a new tournament
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments
            Method: POST

  getTournamentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-tournaments/index.getTournamentsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles fetching and filtering tournaments
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments
            Method: GET

  getTournamentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-tournament-by-id/index.getTournamentByIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles fetching a single tournament with detailed organizer information
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournaments/{id}
            Method: GET

  getOrganiserTournamentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-organisers-tournaments/index.getOrganisersTournamentsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all tournaments for a specific organiser
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /organiser-tournaments/{id}
            Method: GET

  createTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-team/index.createTeamHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Creates a new team and adds the creator as first member
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teams
            Method: POST

  getTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-teams/index.getTeamsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all teams with optional filters
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teams
            Method: GET

  getMyTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-my-teams/index.getMyTeamsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all teams for a specific user
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /my-teams/{user_id}
            Method: GET

  getTeamByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-team-by-id/index.getTeamByIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get a team by id
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teams/{id}
            Method: GET

  getPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-players/index.getPlayersHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all players from the database
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /players
            Method: GET

  getSportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-sports/index.getSportsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get all sports from the database
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /sports
            Method: GET

  enterTournamentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-entry/index.enterTournamentHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Enter a team into a tournament
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /entry
            Method: POST

  getTournamentEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-entries/index.getTournamentEntriesHandler  
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get tournament entries
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tournament-entries/{tournament_id}
            Method: GET

  checkEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: check-entry/index.entryLookupHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Check if a user is entered into a tournament
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /check-entry
            Method: POST

  entryStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: entry-status/index.updateEntryStatusHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Update the status of an entry
      CodeUri: src/handlers
      Environment:
        Variables:
          DB_HOST: tornymysql.mysql.database.azure.com
          DB_PORT: 3306
          DB_USER: tornymysql
          DB_PASSWORD: Robots4ever1!
          DB_NAME: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /update-entry-status
            Method: POST
    
  uploadImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: upload-images/index.uploadImagesHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Upload images to Cloudflare R2
      CodeUri: src/handlers
      Environment:
        Variables:
          CLOUDFLARE_ACCOUNT_ID: "a444cf6360af34f45ccfb4aaff861a86"
          CLOUDFLARE_API_TOKEN: "hGqlnq0T2ch_0hNcki38agoUqutIfpAhJgZ41IPa"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-images
            Method: POST

  uploadGalleryImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: upload-gallery-image/index.uploadGalleryImageHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Upload a gallery image
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-gallery-image
            Method: POST

  getGalleryImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-gallery-images/index.getGalleryImagesHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get gallery images
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /gallery-images
            Method: GET

  deleteGalleryImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-gallery-images/index.deleteGalleryImageHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete a gallery image
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
          CLOUDFLARE_ACCOUNT_ID: "a444cf6360af34f45ccfb4aaff861a86"
          CLOUDFLARE_API_TOKEN: "hGqlnq0T2ch_0hNcki38agoUqutIfpAhJgZ41IPa"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /delete-gallery-image
            Method: POST

  getClubsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers
      Handler: get-clubs/index.searchClubsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64  
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /clubs
            Method: GET

  addClubAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-club-admin/index.addClubAdminHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64    
      MemorySize: 128
      Timeout: 100
      Description: Add a club admin
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /add-club-admin
            Method: POST

  createPlayerAchievementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create-player-achievement/index.createPlayerAchievementHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64  
      MemorySize: 128
      Timeout: 100
      Description: Create a player achievement
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-player-achievement
            Method: POST

  deletePlayerAchievementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-player-achievement/index.deletePlayerAchievementHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Delete a player achievement
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /delete-player-achievement
            Method: POST

  getPlayerAchievementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-player-achievement/index.getPlayerAchievementHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64      
      MemorySize: 128
      Timeout: 100
      Description: Get a player achievement
      CodeUri: src/handlers
      Environment:
        Variables:
          MYSQL_HOST: tornymysql.mysql.database.azure.com
          MYSQL_PORT: 3306
          MYSQL_USER: tornymysql
          MYSQL_PASSWORD: Robots4ever1!
          MYSQL_DATABASE: torny_db
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-player-achievement/{player_id}
            Method: GET

Outputs:
  RegisterEndpoint:
    Description: API Gateway endpoint URL for Register function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register"
  
  LoginEndpoint:
    Description: API Gateway endpoint URL for Login function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login"
    
  GetTeamsEndpoint:
    Description: API Gateway endpoint URL for Get Teams function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teams"
    
  CreateTeamEndpoint:
    Description: API Gateway endpoint URL for Create Team function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teams"
    
  GetSportsEndpoint:
    Description: API Gateway endpoint URL for Get Sports function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sports"
    
  GetPlayersEndpoint:
    Description: API Gateway endpoint URL for Get Players function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/players"
    
  GetTournamentsEndpoint:
    Description: API Gateway endpoint URL for Get Tournaments function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tournaments"
    
  GetTournamentByIdEndpoint:
    Description: API Gateway endpoint URL for Get Tournament By Id function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tournaments/{id}"
